{"version":3,"sources":["components/snake/snake.component.jsx","components/food/food.component.jsx","components/custom-button/custom-button.component.jsx","components/d-pad/assets/down-arrow.png","components/d-pad/assets/up-arrow.png","components/d-pad/assets/right-arrow.png","components/d-pad/assets/left-arrow.png","components/d-pad/d-pad.component.jsx","components/game-area/game-area.component.jsx","App.js","index.js"],"names":["Snake","snakeDots","className","map","dot","i","style","left","top","Food","snakeFood","CustomButton","children","otherProps","DPad","handelDPadClick","onClick","id","src","upArrow","alt","leftArrow","rightArrow","downArrow","getRandomCoordinates","Math","floor","random","INITIAL_STATE","direction","score","buttonText","isGameRunning","snakeSpeed","foodSpwanRate","GameArea","updateFoodLocation","setState","handelArrowPress","event","console","log","key","target","moveSnake","dots","state","head","length","push","shift","gameOver","alert","checkSnakeConsumption","enlargeSnake","handelClick","startGame","setInterval","this","document","onkeydown","checkIfCollapsed","unshift","snake","pop","forEach","startSnake","clearInterval","startFood","React","Component","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.68ecd4fa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './snake.styles.scss';\r\n\r\nconst Snake = ({ snakeDots }) => {\r\n\r\n    return (\r\n        <div className='snake-container'>\r\n            {\r\n               snakeDots.map((dot,i) => {\r\n                const style = {\r\n                    left: `${dot[0]}px`,\r\n                    top: `${dot[1]}px`\r\n                } \r\n                return (\r\n                    <div className='snake-dot' key={i} style={style} />\r\n                )\r\n               }) \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Snake;","import React from 'react';\r\n\r\nimport './food.styles.scss';\r\n\r\nconst Food = ({ snakeFood }) => {\r\n    const style = {\r\n        left: `${snakeFood[0]}px`,\r\n        top: `${snakeFood[1]}px`\r\n    } \r\n    return (\r\n        <div className='snake-food' style={style} />\r\n    )\r\n}\r\n\r\nexport default Food;","import React from 'react';\r\n\r\nimport './custom-button.styles.scss';\r\n\r\nconst CustomButton = ({ children, ...otherProps }) => (\r\n    <button className='custom-button-container' {...otherProps}>\r\n        {children}\r\n    </button>\r\n);\r\n\r\nexport default CustomButton;","export default __webpack_public_path__ + \"static/media/down-arrow.78f62acb.png\";","export default __webpack_public_path__ + \"static/media/up-arrow.565f3b30.png\";","export default __webpack_public_path__ + \"static/media/right-arrow.cea60674.png\";","export default __webpack_public_path__ + \"static/media/left-arrow.3d9ffab6.png\";","import React from 'react';\r\n\r\nimport './d-pad.styles.scss';\r\n\r\nimport downArrow from './assets/down-arrow.png';\r\nimport upArrow from './assets/up-arrow.png';\r\nimport rightArrow from './assets/right-arrow.png';\r\nimport leftArrow from './assets/left-arrow.png';\r\n\r\nconst DPad = ({ handelDPadClick }) => {\r\n\r\n\r\n    return (\r\n        <div className='d-pad-container' onClick={handelDPadClick}>\r\n            <img className='d-pad-arrows up-arrow' id='up-arrow' src={upArrow} alt=\"Up Arrow\" />\r\n            <img className='d-pad-arrows left-arrow' id='left-arrow' src={leftArrow} alt=\"Left Arrow\" />          \r\n            <img className='d-pad-arrows right-arrow' id='right-arrow' src={rightArrow} alt=\"Right Arrow\" /> \r\n            <img className='d-pad-arrows down-arrow' id='down-arrow' src={downArrow} alt=\"Down Arrow\" />          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DPad;","import React from 'react';\r\nimport './game-area.styles.scss';\r\n\r\nimport Snake from '../snake/snake.component';\r\nimport Food from '../food/food.component';\r\nimport CustomButton from '../custom-button/custom-button.component';\r\nimport DPad from '../d-pad/d-pad.component';\r\n\r\nconst getRandomCoordinates = () => { // This is generate random coordinates for the food\r\n    let min = 1;\r\n    let max = 240;\r\n    let x = Math.floor((Math.random()*(max-min+1)+min)/10)*10;\r\n    let y =  Math.floor((Math.random()*(max-min+1)+min)/10)*10;\r\n    return [x,y]\r\n}\r\n\r\nconst INITIAL_STATE = { // Initial state of the snake game\r\n    snakeDots: [\r\n        [10,130],\r\n        [20,130],\r\n        [30,130]\r\n    ],\r\n    snakeFood: getRandomCoordinates(),\r\n    direction: 'RIGHT',\r\n    score: 0,\r\n    buttonText: 'Start',\r\n    isGameRunning: false,\r\n    snakeSpeed: 500,\r\n    foodSpwanRate: 40000\r\n}\r\n\r\nclass GameArea extends React.Component {\r\n    constructor() {\r\n        super();\r\n        \r\n        this.state = INITIAL_STATE;\r\n    }\r\n    \r\n    componentDidMount() {   \r\n        setInterval(this.updateFoodLocation, 40000); // This will update the food location after 40sec   \r\n        document.onkeydown = this.handelArrowPress;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.checkSnakeConsumption(); // This is to handel when the snake eats the food\r\n        this.checkIfCollapsed(); // Added this mechanic where the game ends if the snake bites itself\r\n    }\r\n\r\n    updateFoodLocation = () => {\r\n        this.setState({snakeFood: getRandomCoordinates()});\r\n    }\r\n\r\n    handelArrowPress = (event) => {\r\n         console.log(event.key);\r\n        switch(event.key) {\r\n            case 'ArrowUp':\r\n                this.setState({direction: 'UP'});\r\n                break;\r\n            case 'ArrowDown':\r\n                this.setState({direction: 'DOWN'});\r\n                break;\r\n            case 'ArrowRight':\r\n                this.setState({direction: 'RIGHT'});\r\n                break;\r\n            case 'ArrowLeft':\r\n                this.setState({direction: 'LEFT'});\r\n                break;\r\n            default:\r\n                break;\r\n        }   \r\n        // console.log(direction);\r\n        // moveSnake();\r\n    }\r\n\r\n    handelDPadClick = (event) => {\r\n        console.log(event.target.id);\r\n        switch(event.target.id) {\r\n            case 'up-arrow':\r\n                this.setState({direction: 'UP'});\r\n                break;\r\n            case 'down-arrow':\r\n                this.setState({direction: 'DOWN'});\r\n                break;\r\n            case 'right-arrow':\r\n                this.setState({direction: 'RIGHT'});\r\n                break;\r\n            case 'left-arrow':\r\n                this.setState({direction: 'LEFT'});\r\n                break;\r\n            default:\r\n                break;\r\n        }   \r\n    }\r\n\r\n    moveSnake = () => { \r\n        // This has the logic for normal movement of snake as well as wrap around\r\n        // when it reaches the boundary \r\n        \r\n        // console.log(`Moving snake : ${direction}`);\r\n        let dots = [...this.state.snakeDots];\r\n        let head = dots[dots.length - 1]\r\n        // console.log('old dots',dots);\r\n        // console.log('old head',head);\r\n\r\n        switch(this.state.direction) {\r\n            case 'UP':\r\n                head = (head[1] - 10 >= 0) ?\r\n                [head[0], head[1] - 10]\r\n                : [head[0], 250];\r\n                break;\r\n            case 'DOWN':\r\n                head = (head[1] + 10 <= 250) ?\r\n                 [head[0], head[1] + 10]\r\n                 : [head[0], 0];\r\n                break;\r\n            case 'RIGHT':\r\n                head = (head[0] + 10 <= 250 ) ?\r\n                 [head[0] + 10, head[1]]\r\n                 : [0, head[1]];\r\n                break;\r\n            case 'LEFT':\r\n                head= (head[0] - 10 >= 0) ?\r\n                 [head[0] - 10, head[1]]\r\n                 : [250, head[1]];\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        \r\n        dots.push(head);\r\n        dots.shift();   \r\n        // console.log('new head',head);\r\n        // console.log('new dots',dots);\r\n        this.setState({\r\n            snakeDots: dots\r\n          })\r\n    }\r\n\r\n    gameOver = () => { // Game over state \r\n        alert(`Game Over!! Your snake bit itself! Score: ${this.state.score}`);\r\n        this.setState(INITIAL_STATE);\r\n    }\r\n\r\n    enlargeSnake() { // This will increase the length of snake by 1 dot\r\n        let dots = [...this.state.snakeDots];\r\n        dots.unshift([])\r\n        this.setState({\r\n          snakeDots: dots\r\n        })\r\n    }\r\n\r\n    checkIfCollapsed() { // This is to trigger the game over state when the snake bites itself\r\n        let snake = [...this.state.snakeDots];\r\n        let head = snake[snake.length - 1];\r\n        snake.pop();\r\n        snake.forEach(dot => {\r\n          if (head[0] === dot[0] && head[1] === dot[1]) {\r\n            this.gameOver();\r\n          }\r\n        })\r\n    }\r\n\r\n    // increaseSpeed() {\r\n    //     if (this.state.speed > 10) {\r\n    //       this.setState({\r\n    //         speed: this.state.speed - 10\r\n    //       })\r\n    //     }\r\n        \r\n    //     this.startSnakeMove();\r\n    //   }\r\n\r\n    checkSnakeConsumption = () => { // Handels the snake food consumption\r\n        const { snakeDots,snakeFood,score } = this.state;\r\n        const head = snakeDots[snakeDots.length - 1];\r\n\r\n        if(head[0] === snakeFood[0] && head[1] === snakeFood[1]) {\r\n            this.enlargeSnake();\r\n            this.updateFoodLocation();\r\n            // this.increaseSpeed();\r\n            this.setState({score: score + 1});\r\n        }\r\n    }\r\n   \r\n    startGame() {   \r\n        let startSnake = setInterval(() => {\r\n            this.moveSnake(); \r\n            if (this.state.isGameRunning === false) {\r\n                clearInterval(startSnake);\r\n            }\r\n        }                \r\n        , this.state.snakeSpeed);\r\n\r\n        let startFood = setInterval(() => {\r\n            this.updateFoodLocation(); \r\n            if (this.state.isGameRunning === false) {\r\n                clearInterval(startFood);\r\n            }\r\n        }, this.state.foodSpwanRate)\r\n        // setInterval(this.updateFoodLocation, 40000);\r\n    }\r\n\r\n    handelClick = () => { // Click handler from start/stop states of the game\r\n        const { buttonText } = this.state;\r\n        if(buttonText === 'Start') {          \r\n            this.setState({buttonText: 'Stop', isGameRunning: true});\r\n            this.startGame();\r\n            // let startGame = setInterval(() => {\r\n            //     this.moveSnake(); \r\n            //     if (this.state.isGameRunning === false) {\r\n            //         clearInterval(startGame);\r\n            //     }\r\n            // }                \r\n            // , this.state.speed);\r\n\r\n        } else {   \r\n            this.setState({buttonText: 'Start',isGameRunning: false});\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { snakeDots,snakeFood,score,buttonText } = this.state;\r\n        return (\r\n            <div className='game-page'>\r\n                <h2>Play snake!</h2>\r\n                <h3>Score: {score}</h3>\r\n                <div className='game-area' >\r\n                    <Snake snakeDots={snakeDots} />\r\n                    <Food snakeFood={snakeFood} />\r\n                </div>\r\n                <CustomButton\r\n                onClick={this.handelClick}\r\n                >{buttonText}</CustomButton>\r\n                <DPad handelDPadClick={this.handelDPadClick} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n    \r\n\r\nexport default GameArea;","import './App.scss';\n// import React,{ useEffect } from 'react';\n\nimport GameArea from './components/game-area/game-area.component';\n// import GameArea from './components/game-area/game-area-hook.component';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <GameArea />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}